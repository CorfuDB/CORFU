package org.corfudb.protocols.wireprotocol;

import com.google.common.collect.ImmutableMap;
import io.netty.buffer.ByteBuf;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.Singular;
import lombok.ToString;
import org.corfudb.runtime.view.Layout;

/**
 * Contains a Node's state:
 * Sequencer state - ready/not_ready.
 * connectivity status - Node's connectivity with every other node in the layout.
 * <p>
 * For instance, node a fully connected to all nodes:
 * {"a": {"endpoint": "a", "connectivity":{"a": true, "b": true, "c": true}}}
 * <p>
 * Created by zlokhandwala on 11/2/18.
 */
@Data
@Builder
@AllArgsConstructor
@EqualsAndHashCode
public class NodeState implements ICorfuPayload<NodeState> {

    public static final long INVALID_HEARTBEAT_COUNTER = -1L;

    private final NodeConnectivity connectivity;

    private final HeartbeatTimestamp heartbeat;

    /**
     * Sequencer metrics of the node.
     */
    private final SequencerMetrics sequencerMetrics;

    @Builder
    @AllArgsConstructor
    @ToString
    @EqualsAndHashCode
    public static class NodeConnectivity implements ICorfuPayload<NodeConnectivity> {
        @Getter
        private final String endpoint;
        @Getter
        private final NodeConnectivityState type;
        @Getter
        @NonNull
        private final ImmutableMap<String, Boolean> connectivity;

        public NodeConnectivity(ByteBuf buf) {
            endpoint = ICorfuPayload.fromBuffer(buf, String.class);
            String typeName = ICorfuPayload.fromBuffer(buf, String.class);
            type = NodeConnectivityState.valueOf(typeName);
            connectivity = ImmutableMap.copyOf(ICorfuPayload.mapFromBuffer(buf, String.class, Boolean.class));
        }

        @Override
        public void doSerialize(ByteBuf buf) {
            ICorfuPayload.serialize(buf, endpoint);
            ICorfuPayload.serialize(buf, type.name());
            ICorfuPayload.serialize(buf, connectivity);
        }

        /**
         * Returns node status: connected, disconnected
         *
         * @param node node name
         * @return node status
         */
        public boolean getConnectionStatus(String node) {
            if (type == NodeConnectivityState.UNAVAILABLE){
                return false;
            }

            if (!connectivity.containsKey(node)){
                return false;
            }

            return connectivity.get(node);
        }

        /**
         * Get number of connected nodes
         * @return number of connected nodes
         */
        public int getConnected() {
            return connectivity.keySet().stream().mapToInt(node -> connectivity.get(node) ? 1 : 0).sum();
        }
    }

    public NodeState(ByteBuf buf) {
        connectivity = ICorfuPayload.fromBuffer(buf, NodeConnectivity.class);
        heartbeat = ICorfuPayload.fromBuffer(buf, HeartbeatTimestamp.class);
        sequencerMetrics = ICorfuPayload.fromBuffer(buf, SequencerMetrics.class);
    }

    @Override
    public void doSerialize(ByteBuf buf) {
        ICorfuPayload.serialize(buf, connectivity);
        ICorfuPayload.serialize(buf, heartbeat);
        ICorfuPayload.serialize(buf, sequencerMetrics);
    }

    /**
     * Creates a default NodeState for the given endpoint.
     * This contains default SequencerMetrics and empty connectivityStatus.
     *
     * @param endpoint Endpoint for the NodeState.
     * @return Default NodeState.
     */
    @Deprecated
    public static NodeState getDefaultNodeState(String endpoint) {
        NodeConnectivity connectivity = NodeConnectivity.builder()
                .endpoint(endpoint)
                .type(NodeConnectivityState.UNAVAILABLE)
                .connectivity(ImmutableMap.of())
                .build();
        return new NodeState(
                connectivity,
                new HeartbeatTimestamp(Layout.INVALID_EPOCH, INVALID_HEARTBEAT_COUNTER),
                SequencerMetrics.UNKNOWN
        );
    }

    /**
     * Heartbeat timestamp is a tuple of the heartbeat counter and the epoch.
     * This timestamp is generated by the local node and attached to the NodeState object.
     * <p>
     * Created by zlokhandwala on 11/13/18.
     */
    @ToString
    @EqualsAndHashCode
    @AllArgsConstructor
    public static class HeartbeatTimestamp implements Comparable<HeartbeatTimestamp>, ICorfuPayload<HeartbeatTimestamp> {
        final long epoch;
        final long counter;

        @Override
        public int compareTo(@NonNull HeartbeatTimestamp heartbeatTimestamp) {
            return Long.compare(epoch, heartbeatTimestamp.epoch);
        }

        public HeartbeatTimestamp(ByteBuf buf) {
            epoch = ICorfuPayload.fromBuffer(buf, Long.class);
            counter = ICorfuPayload.fromBuffer(buf, Long.class);
        }

        @Override
        public void doSerialize(ByteBuf buf) {
            ICorfuPayload.serialize(buf, epoch);
            ICorfuPayload.serialize(buf, counter);
        }
    }

    public enum NodeConnectivityState {
        /**
         * Two nodes are connected
         */
        CONNECTED,
        /**
         * We are unable to get node state from the node (link failure between the nodes)
         */
        UNAVAILABLE
    }
}
