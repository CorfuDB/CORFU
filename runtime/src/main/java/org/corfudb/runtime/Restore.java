package org.corfudb.runtime;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import lombok.extern.slf4j.Slf4j;
import org.corfudb.protocols.logprotocol.OpaqueEntry;
import org.corfudb.protocols.logprotocol.SMREntry;
import org.corfudb.runtime.collections.CorfuStore;
import org.corfudb.runtime.collections.TxBuilder;
import org.corfudb.util.serializer.Serializers;

import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.Array;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

import static org.corfudb.runtime.view.TableRegistry.CORFU_SYSTEM_NAMESPACE;

@Slf4j
public class Restore {
    /**
     * Read the file generated by backupTable
     * @param fileName
     * @param streamId
     * @return
     */
    public static boolean restoreTable(String fileName, UUID streamId,  UUID srcStreamId, CorfuStore corfuStore) throws IOException {
        FileInputStream fileInput = new FileInputStream(fileName);
        long numEntries = 0;
        Path path = Paths.get(fileName);

        try {

            TxBuilder tx = corfuStore.tx(CORFU_SYSTEM_NAMESPACE);
            SMREntry entry = new SMREntry("clear", new Array[0], Serializers.PRIMITIVE);
            tx.logUpdate(streamId, entry);
            tx.commit();

            /**
             * For each opaque entry , write a transaction to the database.
             */
            //while (fileInput.available() > 0) {
            while (fileInput.available()> 0) {
                OpaqueEntry opaqueEntry = OpaqueEntry.read(fileInput);
                List<SMREntry> smrEntries = opaqueEntry.getEntries().get(srcStreamId);
                if (smrEntries == null || smrEntries.isEmpty()) {
                    continue;
                }

                CorfuStoreMetadata.Timestamp ts = corfuStore.getTimestamp();
                TxBuilder txBuilder = corfuStore.tx(CORFU_SYSTEM_NAMESPACE);
                txBuilder.logUpdate(streamId, smrEntries);
                txBuilder.commit(ts);
                numEntries++;
                log.debug("write uuid {} src uuid {} with numEntries", streamId, srcStreamId, numEntries);
            }
        } catch (Exception e) {
            log.error("catch an exception ", e);
            throw e;
        }

        fileInput.close();
        return true;
    }
}
