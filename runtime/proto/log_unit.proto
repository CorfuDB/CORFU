syntax = "proto3";

package org.corfudb.runtime;
option java_package = "org.corfudb.runtime.protocol.proto";

import "common.proto";

message DataRankMsg {
  int64 rank = 1;
  UuidMsg id = 2;
}

//TODO: Should we have separate message for each type?
message LogUnitMetadataMsg {
  oneof metadata {
    DataRankMsg data_rank = 1;
    // List of UUIDToLongPairs
    // List backpointer_map = 2;
    int64 global_address = 3;
    int32 checkpoint_type = 4; //TODO: Use enum instead of integer value?
    UuidMsg checkpoint_id = 5;
    UuidMsg checkpointed_stream_id = 6;
    int64 checkpointed_stream_start_log_address = 7;
    UuidMsg client_id = 8;
    UuidMsg thread_id = 9;
    int64 epoch = 10;
    int32 codec_type_id = 11; //TODO: Use enum instead of integer value?
  }
}

//TODO: Determine Protobuf representation of LogData and complete Read/Write RPCs
message LogDataMsg {

}

message WriteLogRequestMsg {

}

message WriteLogResponseMsg {

}

message RangeWriteLogRequestMsg {

}

message RangeWriteLogResponseMsg {

}

message ReadLogRequestMsg {

}

message ReadLogResponseMsg {

}

message InspectAddressesRequestMsg {
  repeated int64 addresses = 1;
}

message InspectAddressesResponseMsg {
  repeated int64 empty_addresses = 1;
}

message TrimLogRequestMsg {
  // TokenMsg address = 1;
}

message TrimLogResponseMsg {
}

message TrimMarkRequestMsg {
}

message TrimMarkResponseMsg {
  int64 trim_mark = 1;
}

message TailRequestMsg {
  enum Type {
    INVALID = 0;
    LOG_TAIL = 1;
    STREAMS_TAILS = 2;
    ALL_STREAMS_TAIL = 3;
  }

  Type req_type = 1;
  repeated UuidMsg streams = 2;
}

message TailResponseMsg {
  int64 epoch = 1;
  int64 log_tail = 2;
  // List of UUIDToLongPairs
  // List stream_tails = 3;
}

message CompactRequestMsg {
}

message CompactResponseMsg {
}

message FlushCacheRequestMsg {
}

message FlushCacheResponseMsg {
}

message LogAddressSpaceRequestMsg {
}

message LogAddressSpaceResponseMsg {
  int64 log_tail = 1;
  // List of UUIDToStreamAddressPairs
  // List address_map = 2;
}

message KnownAddressRequestMsg {
  int64 start_range = 1;
  int64 end_range = 2;
}

message KnownAddressResponseMsg {
  repeated int64 known_addresses = 1;
}

message CommittedTailRequestMsg {
}

message CommittedTailResponseMsg {
  int64 committed_tail = 1;
}

message UpdateCommittedTailRequestMsg {
  int64 committed_tail = 1;
}

message UpdateCommittedTailResponseMsg {
}

message ResetLogUnitRequestMsg {
  int64 epoch = 1;
}

message ResetLogUnitResponseMsg {
}
