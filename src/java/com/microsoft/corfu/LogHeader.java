/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.microsoft.corfu;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LogHeader implements org.apache.thrift.TBase<LogHeader, LogHeader._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogHeader");

  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField READNEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("readnext", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField NEXTOFF_FIELD_DESC = new org.apache.thrift.protocol.TField("nextoff", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LogHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LogHeaderTupleSchemeFactory());
  }

  public MetaInfo range; // required
  public boolean readnext; // required
  public long nextoff; // required
  /**
   * 
   * @see CorfuErrorCode
   */
  public CorfuErrorCode err; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RANGE((short)1, "range"),
    READNEXT((short)2, "readnext"),
    NEXTOFF((short)3, "nextoff"),
    /**
     * 
     * @see CorfuErrorCode
     */
    ERR((short)4, "err");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RANGE
          return RANGE;
        case 2: // READNEXT
          return READNEXT;
        case 3: // NEXTOFF
          return NEXTOFF;
        case 4: // ERR
          return ERR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READNEXT_ISSET_ID = 0;
  private static final int __NEXTOFF_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetaInfo.class)));
    tmpMap.put(_Fields.READNEXT, new org.apache.thrift.meta_data.FieldMetaData("readnext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEXTOFF, new org.apache.thrift.meta_data.FieldMetaData("nextoff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CorfuErrorCode.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogHeader.class, metaDataMap);
  }

  public LogHeader() {
  }

  public LogHeader(
    MetaInfo range,
    boolean readnext,
    long nextoff,
    CorfuErrorCode err)
  {
    this();
    this.range = range;
    this.readnext = readnext;
    setReadnextIsSet(true);
    this.nextoff = nextoff;
    setNextoffIsSet(true);
    this.err = err;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogHeader(LogHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRange()) {
      this.range = new MetaInfo(other.range);
    }
    this.readnext = other.readnext;
    this.nextoff = other.nextoff;
    if (other.isSetErr()) {
      this.err = other.err;
    }
  }

  public LogHeader deepCopy() {
    return new LogHeader(this);
  }

  @Override
  public void clear() {
    this.range = null;
    setReadnextIsSet(false);
    this.readnext = false;
    setNextoffIsSet(false);
    this.nextoff = 0;
    this.err = null;
  }

  public MetaInfo getRange() {
    return this.range;
  }

  public LogHeader setRange(MetaInfo range) {
    this.range = range;
    return this;
  }

  public void unsetRange() {
    this.range = null;
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean isSetRange() {
    return this.range != null;
  }

  public void setRangeIsSet(boolean value) {
    if (!value) {
      this.range = null;
    }
  }

  public boolean isReadnext() {
    return this.readnext;
  }

  public LogHeader setReadnext(boolean readnext) {
    this.readnext = readnext;
    setReadnextIsSet(true);
    return this;
  }

  public void unsetReadnext() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READNEXT_ISSET_ID);
  }

  /** Returns true if field readnext is set (has been assigned a value) and false otherwise */
  public boolean isSetReadnext() {
    return EncodingUtils.testBit(__isset_bitfield, __READNEXT_ISSET_ID);
  }

  public void setReadnextIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READNEXT_ISSET_ID, value);
  }

  public long getNextoff() {
    return this.nextoff;
  }

  public LogHeader setNextoff(long nextoff) {
    this.nextoff = nextoff;
    setNextoffIsSet(true);
    return this;
  }

  public void unsetNextoff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTOFF_ISSET_ID);
  }

  /** Returns true if field nextoff is set (has been assigned a value) and false otherwise */
  public boolean isSetNextoff() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTOFF_ISSET_ID);
  }

  public void setNextoffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTOFF_ISSET_ID, value);
  }

  /**
   * 
   * @see CorfuErrorCode
   */
  public CorfuErrorCode getErr() {
    return this.err;
  }

  /**
   * 
   * @see CorfuErrorCode
   */
  public LogHeader setErr(CorfuErrorCode err) {
    this.err = err;
    return this;
  }

  public void unsetErr() {
    this.err = null;
  }

  /** Returns true if field err is set (has been assigned a value) and false otherwise */
  public boolean isSetErr() {
    return this.err != null;
  }

  public void setErrIsSet(boolean value) {
    if (!value) {
      this.err = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RANGE:
      if (value == null) {
        unsetRange();
      } else {
        setRange((MetaInfo)value);
      }
      break;

    case READNEXT:
      if (value == null) {
        unsetReadnext();
      } else {
        setReadnext((Boolean)value);
      }
      break;

    case NEXTOFF:
      if (value == null) {
        unsetNextoff();
      } else {
        setNextoff((Long)value);
      }
      break;

    case ERR:
      if (value == null) {
        unsetErr();
      } else {
        setErr((CorfuErrorCode)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RANGE:
      return getRange();

    case READNEXT:
      return Boolean.valueOf(isReadnext());

    case NEXTOFF:
      return Long.valueOf(getNextoff());

    case ERR:
      return getErr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RANGE:
      return isSetRange();
    case READNEXT:
      return isSetReadnext();
    case NEXTOFF:
      return isSetNextoff();
    case ERR:
      return isSetErr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LogHeader)
      return this.equals((LogHeader)that);
    return false;
  }

  public boolean equals(LogHeader that) {
    if (that == null)
      return false;

    boolean this_present_range = true && this.isSetRange();
    boolean that_present_range = true && that.isSetRange();
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (!this.range.equals(that.range))
        return false;
    }

    boolean this_present_readnext = true;
    boolean that_present_readnext = true;
    if (this_present_readnext || that_present_readnext) {
      if (!(this_present_readnext && that_present_readnext))
        return false;
      if (this.readnext != that.readnext)
        return false;
    }

    boolean this_present_nextoff = true;
    boolean that_present_nextoff = true;
    if (this_present_nextoff || that_present_nextoff) {
      if (!(this_present_nextoff && that_present_nextoff))
        return false;
      if (this.nextoff != that.nextoff)
        return false;
    }

    boolean this_present_err = true && this.isSetErr();
    boolean that_present_err = true && that.isSetErr();
    if (this_present_err || that_present_err) {
      if (!(this_present_err && that_present_err))
        return false;
      if (!this.err.equals(that.err))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LogHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LogHeader typedOther = (LogHeader)other;

    lastComparison = Boolean.valueOf(isSetRange()).compareTo(typedOther.isSetRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, typedOther.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadnext()).compareTo(typedOther.isSetReadnext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadnext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readnext, typedOther.readnext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextoff()).compareTo(typedOther.isSetNextoff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextoff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextoff, typedOther.nextoff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErr()).compareTo(typedOther.isSetErr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, typedOther.err);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LogHeader(");
    boolean first = true;

    sb.append("range:");
    if (this.range == null) {
      sb.append("null");
    } else {
      sb.append(this.range);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("readnext:");
    sb.append(this.readnext);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextoff:");
    sb.append(this.nextoff);
    first = false;
    if (!first) sb.append(", ");
    sb.append("err:");
    if (this.err == null) {
      sb.append("null");
    } else {
      sb.append(this.err);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (range != null) {
      range.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogHeaderStandardSchemeFactory implements SchemeFactory {
    public LogHeaderStandardScheme getScheme() {
      return new LogHeaderStandardScheme();
    }
  }

  private static class LogHeaderStandardScheme extends StandardScheme<LogHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LogHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.range = new MetaInfo();
              struct.range.read(iprot);
              struct.setRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // READNEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.readnext = iprot.readBool();
              struct.setReadnextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEXTOFF
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nextoff = iprot.readI64();
              struct.setNextoffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ERR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.err = CorfuErrorCode.findByValue(iprot.readI32());
              struct.setErrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LogHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.range != null) {
        oprot.writeFieldBegin(RANGE_FIELD_DESC);
        struct.range.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(READNEXT_FIELD_DESC);
      oprot.writeBool(struct.readnext);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEXTOFF_FIELD_DESC);
      oprot.writeI64(struct.nextoff);
      oprot.writeFieldEnd();
      if (struct.err != null) {
        oprot.writeFieldBegin(ERR_FIELD_DESC);
        oprot.writeI32(struct.err.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogHeaderTupleSchemeFactory implements SchemeFactory {
    public LogHeaderTupleScheme getScheme() {
      return new LogHeaderTupleScheme();
    }
  }

  private static class LogHeaderTupleScheme extends TupleScheme<LogHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LogHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRange()) {
        optionals.set(0);
      }
      if (struct.isSetReadnext()) {
        optionals.set(1);
      }
      if (struct.isSetNextoff()) {
        optionals.set(2);
      }
      if (struct.isSetErr()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRange()) {
        struct.range.write(oprot);
      }
      if (struct.isSetReadnext()) {
        oprot.writeBool(struct.readnext);
      }
      if (struct.isSetNextoff()) {
        oprot.writeI64(struct.nextoff);
      }
      if (struct.isSetErr()) {
        oprot.writeI32(struct.err.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LogHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.range = new MetaInfo();
        struct.range.read(iprot);
        struct.setRangeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.readnext = iprot.readBool();
        struct.setReadnextIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nextoff = iprot.readI64();
        struct.setNextoffIsSet(true);
      }
      if (incoming.get(3)) {
        struct.err = CorfuErrorCode.findByValue(iprot.readI32());
        struct.setErrIsSet(true);
      }
    }
  }

}

