syntax = "proto3";

package org.corfudb.infrastructure.logreplication;
option java_package = "org.corfudb.infrastructure.logreplication";

import "google/protobuf/any.proto";
import "messages.proto";


service LogReplicationChannel {

    // Client sends Negotiation Request
    rpc negotiate(org.corfudb.runtime.CorfuMessage) returns (org.corfudb.runtime.CorfuMessage) {}

    // Client sends Negotiation Request
    rpc queryLeadership(org.corfudb.runtime.CorfuMessage) returns (org.corfudb.runtime.CorfuMessage) {}

    // A client-side streaming RPC where the client writes a sequence of messages and sends them to the server,
    // again using a provided stream. Once the client has finished writing the messages, it waits for the server
    // to read them all and return its response (ack).
    rpc replicate(stream org.corfudb.runtime.CorfuMessage) returns (org.corfudb.runtime.CorfuMessage) {}
}