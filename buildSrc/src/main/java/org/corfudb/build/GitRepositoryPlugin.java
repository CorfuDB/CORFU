package org.corfudb.build;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Properties;
import java.util.stream.Collectors;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.Status;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.gradle.api.DefaultTask;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.api.plugins.BasePlugin;
import org.gradle.api.plugins.JavaPlugin;
import org.gradle.api.tasks.TaskAction;

import pl.project13.maven.git.*;
import pl.project13.maven.git.log.*;

class GitRepositoryPlugin implements Plugin<Project> {

    @Override
    public void apply(Project project) {
        Task task = project.getTasks().create("generateGitProperties",
                GenerateGitPropertiesTask.class);
        task.setGroup(BasePlugin.BUILD_GROUP);
        ensureTaskRunsOnJavaClassesTask(project, task);
    }

    private void ensureTaskRunsOnJavaClassesTask(Project project, Task task) {
        project.getTasks().getByName(JavaPlugin.CLASSES_TASK_NAME).dependsOn(task);
    }


    public static class GenerateGitPropertiesTask extends DefaultTask {

        @TaskAction
        void generate() throws IOException, GitAPIException, GitCommitIdExecutionException {
            File directory = new File(getProject().getBuildDir(),
                    "resources" + File.separator + "main");
            if (!directory.exists()) {
                directory.mkdirs();
            }

            File file = new File(directory.getAbsolutePath(), "git.properties");
            if (!file.exists()) {
                file.createNewFile();
            }



            Properties props = new Properties();
            GitDataProvider jGitProvider = JGitProvider
                    .on(new File(getProject().getRootDir().getAbsolutePath(),
                            Constants.DOT_GIT_EXT), new StdOutLoggerBridge(false))
                    .setPrefixDot("git.")
                    .setAbbrevLength(5)
                    .setDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")
                    .setDateFormatTimeZone("GMT")
                    .setGitDescribe(new GitDescribeConfig())
                    .setCommitIdGenerationMode(CommitIdGenerationMode.FLAT);

            jGitProvider.loadGitData(props);
            props.put("git.commit.id.describe-short", props.get("git.commit.id.describe"));
            SimpleDateFormat smf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
            props.put("git.build.time", smf.format(new Date()));
            props.put("git.build.version", getProject().getVersion().toString());
            try {
                props.put("git.build.host", InetAddress.getLocalHost().getHostName());
            } catch (UnknownHostException e) {
                props.put("git.build.host", "unknown");
            }


            try (FileWriter fw = new FileWriter(file)) {
                props.store(fw, "AutoGenerated by GitRepositoryPlugin");
            }
        }

    }
}